#    controller_monitor's dispatch policy
#   1st policy: send LOGC message to receiver
#   (used by interface_server)
{
        "router_type":"MSG_FLOW_REMOTE|MSG_FLOW_ROUTE",
        "sender_proc":"verify_proc",
        "receiver_proc":"connector_proc",
        "match_rule":[
            {"match_op":"AND","match_type":"MESSAGE_HEAD",
                "match_elem":["type":"RETC",]},
        ]
}

#   2nd policy:  forward LOGC message to verify proc
#   (used by trust_manager)
{
        "router_type":"MSG_FLOW_LOCAL|MSG_FLOW_AUDIT",
        "sender_proc":"connector_proc",
        "receiver_proc":"verify_proc",
        "match_rule":[
            {"match_op":"AND","match_type":"MESSAGE_HEAD",
                "match_elem":["type":"LOGC",]},
        ]
}
#   3rd policy: return RETC message to connector_proc for reply
#   (used by trust_manager)
{
        "router_type":"MSG_FLOW_REMOTE|MSG_FLOW_REPLY",
        "sender_proc":"verify_proc",
        "receiver_proc":"connector_proc",
        "match_rule":[
            {"match_op":"AND","match_type":"MESSAGE_HEAD",
                "match_elem":["type":"RETC",]},
        ]
}
#   4th policy: forward RETC message to json_port_proc
#   (used by interface_server)
{
        "router_type":"MSG_FLOW_REMOTE",
        "sender_proc":"connector_proc",
        "receiver_proc":"json_port_proc",
        "match_rule":[
            {"match_op":"AND","match_type":"MESSAGE_HEAD",
                "match_elem":["type":"RETC",]},
        ]
}
